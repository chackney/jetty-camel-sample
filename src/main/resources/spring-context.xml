<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring-2.11.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <bean name="embeddedServletContainerFactory" class="org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory"   />


    <bean name="helloWorldRoute" class="org.muckingabout.routes.HelloWorldRoot" />
    <bean name="dodgyRoute" class="org.muckingabout.routes.HystrixRoute" />
    <bean name="restRoute" class="org.muckingabout.routes.RestRoute" />


    <!-- Declare a Camel context -->
    <!-- By defining this in a Spring XML file, Camel uses the ApplicationContextRegistry by default -->
    <camel:camelContext id="camel-server" allowUseOriginalMessage="false">
        <!-- Routes -->
        <camel:routeBuilder ref="helloWorldRoute"/>
        <camel:routeBuilder ref="dodgyRoute" />
        <camel:routeBuilder ref="restRoute" />
    </camel:camelContext>

    <bean name="hystrixServlet" class="com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet" />
    <bean name="hystrixServletRegistrationBean" class="org.springframework.boot.context.embedded.ServletRegistrationBean" >
        <constructor-arg name="servlet" ref="hystrixServlet" />
        <constructor-arg name="urlMappings" value="/hystrix.stream" />
    </bean>


    <!-- This is the one that runs the Rest Services -->
    <bean name="camelServlet" class="org.apache.camel.component.servlet.CamelHttpTransportServlet" />
    <bean name="camelRestResgistration" class="org.springframework.boot.context.embedded.ServletRegistrationBean" >
        <constructor-arg name="servlet" ref="camelServlet" />
        <constructor-arg name="urlMappings">
            <list>
                    <value type="java.lang.String">/rest/*</value>
            </list>
        </constructor-arg>
        <property name="name" value="CamelServlet" /><!-- Name has to be CamelServlet - No way to change it in the rest dsl (or not that I could find :)) -->
    </bean>



    <!-- Swagger API -->
    <bean name="apiServlet" class="org.apache.camel.component.swagger.DefaultCamelSwaggerServlet"  />

    <bean name="apiServletRegistrationBean" class="org.springframework.boot.context.embedded.ServletRegistrationBean" >
        <constructor-arg name="servlet" ref="apiServlet" />
        <constructor-arg name="urlMappings" value="/api/*" />
        <property name="initParameters">
            <map>
                <entry key="base.path" value="rest" />
                <entry key="api.path" value="api" />
                <entry key="api.version" value="0.1" />
                <entry key="api.title" value="Basic Pet Store" />
                <entry key="api.description" value="Get your lovely pets here" />


            </map>
        </property>
    </bean>

    <bean name="restSwaggerCorsFilter" class="org.apache.camel.component.swagger.RestSwaggerCorsFilter"  />

    <bean name="swaggerFilterRegistrationBean" class="org.springframework.boot.context.embedded.FilterRegistrationBean" >
        <constructor-arg name="filter" ref="restSwaggerCorsFilter" />
        <constructor-arg name="servletRegistrationBeans" >
            <list>
                <ref bean="apiServletRegistrationBean" />
                <ref bean="camelRestResgistration" />
            </list>
        </constructor-arg>
    </bean>

    <!-- the uer service, there is not need for this to be a spring bean, could easliy just be a camel one -->
    <bean name="petService" class="org.muckingabout.serviceactivator.PetService" />
</beans>